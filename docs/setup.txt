
DEV

NOTE: Other setup steps are currently in java-notes.txt. I will consolidate info later.

Into my WSL dev env (Ubuntu 24.04):

TODO: direnv setup, .envrc,
  * Necessary to close and re-open terminal, NOT just reset it or re-source .bashrc etc. Actually close the window
    and create a new terminal window.
    You WILL get PyEnv AND DirEnv to both work nicely at the same time.

You should be able to see that all your Java stuff comes from your local .jdk inside the project.

----------------------------------------------------------------------------------------------------------------

* CORRECT JAVA LOCATION:
(ve.eaglemap) user@host:~/repos/eaglemap$ which java
/home/user/repos/eaglemap/.jdk/jdk-17.0.15/bin/java

* CORRECT JAVA VERSION FOR THIS PROJECT
(ve.eaglemap) user@host:~/repos/eaglemap$ java --version
java 17.0.15 2025-04-15 LTS
Java(TM) SE Runtime Environment (build 17.0.15+9-LTS-241)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.15+9-LTS-241, mixed mode, sharing)

* IN ANY CASE --NOT-- YOUR SYSTEM JAVA!

-----------------------------------------------------------------------------------------------------------------

Prepare locations.tsv
Location will be /src/main/resources/locations.tsv
.gitignore will keep this large file out of the repo.

Download it from:
https://download.geonames.org/export/dump/cities500.zip
TOTAL LOCATIONS LOADED (total valid lines etc.):
216191

Recommended: cities500.zip - all cities with a population > 500 or seats of adm div down to PPLA4 (ca 185.000)

Renamed to locations.tsv to match the model/table:

// source data file field map - file: locations.tsv
//        ---------------------------------------------------
//  0  geonameid         : integer id of record in geonames database
//  1  name              : name of geographical point (utf8) varchar(200)
//  2  asciiname         : name of geographical point in plain ascii characters, varchar(200)
//  3  alternatenames    : alternatenames, comma separated, ascii names automatically transliterated, convenience attribute from alternatename table, varchar(10000)
//  4  latitude          : latitude in decimal degrees (wgs84)
//  5  longitude         : longitude in decimal degrees (wgs84)
//  6  feature class     : see http://www.geonames.org/export/codes.html, char(1)
//  7  feature code      : see http://www.geonames.org/export/codes.html, varchar(10)
//  8  country code      : ISO-3166 2-letter country code, 2 characters
//  9  cc2               : alternate country codes, comma separated, ISO-3166 2-letter country code, 200 characters
// 10  admin1 code       : fipscode (subject to change to iso code), see exceptions below, see file admin1Codes.txt for display names of this code; varchar(20)
// 11  admin2 code       : code for the second administrative division, a county in the US, see file admin2Codes.txt; varchar(80)
// 12  admin3 code       : code for third level administrative division, varchar(20)
// 13  admin4 code       : code for fourth level administrative division, varchar(20)
// 14  population        : bigint (8 byte int)
// 15  elevation         : in meters, integer
// 16  dem               : digital elevation model, srtm3 or gtopo30, average elevation of 3''x3'' (ca 90mx90m) or 30''x30'' (ca 900mx900m) area in meters, integer. srtm processed by cgiar/ciat.
// 17  timezone          : the iana timezone id (see file timeZone.txt) varchar(40)
// 18  modification date : date of last modification in yyyy-MM-dd format

Loaded 216191 valid location records from this file. (There are occasional null fields. Not sure if any missing delims
or blank lines but out code can handle either of those malformed lines.) generally data in this file looks really good.

